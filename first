module three_ones_detector (
    input clk,
    input reset,
    input in,            // Serial input
    output reg out       // Moore output
);

    typedef enum reg [1:0] {S0, S1, S2, S3} state_t;  // State encoding
    state_t state, next_state;

    // State Transition Logic (Sequential)
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    // Next State Logic (Combinational)
    always @(*) begin
        case (state)
            S0: next_state = (in) ? S1 : S0;
            S1: next_state = (in) ? S2 : S0;
            S2: next_state = (in) ? S3 : S0;
            S3: next_state = (in) ? S3 : S0;
            default: next_state = S0;
        endcase
    end

    // Output Logic (Moore FSM: Output depends only on current state)
    always @(state) begin
        case (state)
            S3: out = 1;  // Detected three consecutive 1's
            default: out = 0;
        endcase
    end
endmodule
